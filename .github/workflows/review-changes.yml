name: Review Changes with Model

on:
  pull_request_target:
    branches:
      - main  # Adjust this to your default branch, e.g., 'master' or 'develop'

jobs:
  review:
    name: Review Changes with Model
    runs-on: ubuntu-latest
    permissions:
      issues: write  # Allows the workflow to write comments on issues and pull requests
    env:
      MODEL_NAME: "deepseek-r1:latest"  # Specify the model you want to use
    steps:
      # Checkout the base branch to ensure no untrusted code from the PR is executed
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      # Fetch the pull request branch to compare changes
      - name: Fetch pull request branch
        run: git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-branch

      # Generate a diff between the base branch and the pull request
      - name: Generate diff
        run: |
          git diff ${{ github.event.pull_request.base.sha }} pr-branch > changeset.diff
          cat changeset.diff

      # Install Ollama, a tool to run the model
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          ollama --version  # Confirm the installation

      # Pull the specified model if it�s not already cached
      - name: Pull Model if not cached
        run: | 
          ollama list
          ollama pull ${{ env.MODEL_NAME }}

      # Start the Ollama server in the background
      - name: Start Ollama Server
        run: |
          if lsof -i:11434; then
            echo "Ollama server already running on port 11434"
          else
            ollama serve &
            timeout 30s bash -c "until curl -s http://localhost:11434 > /dev/null; do sleep 1; done"
          fi

      # Send the diff to the model for review and capture the response
      - name: Review Changes with AI
        run: |
          RAW_RESPONSE=$(curl -s -X POST http://localhost:11434/api/generate \
            -d '{
              "model": "'$MODEL_NAME'",
              "prompt": "Review the following code changes and provide feedback. Only output the final review without any internal thoughts or reasoning:\n\n$(cat changeset.diff)",
              "stream": false
            }')

          # For debug purposes
          echo "Raw response: $RAW_RESPONSE"

          # Try to extract the response, fallback to a default message if not found
          REVIEW=$(echo "$RAW_RESPONSE" | jq -r '.response')          

          if [ -z "$REVIEW" ]; then
            echo "Model did not return a valid review. Check RAW_RESPONSE for errors."
            REVIEW="Model did not return a valid review. RAW_RESPONSE: $RAW_RESPONSE"
          fi

          # For debug purposes
          echo "Review: $REVIEW"

          # Properly format and set the REVIEW environment variable using jq
          {
            echo "REVIEW<<UNIQUE_DELIMITER_12345"
            echo "$REVIEW"
            echo "UNIQUE_DELIMITER_12345"
          } >> $GITHUB_ENV

      # Post the model�s review as a comment on the pull request
      - name: Post Review Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const review = process.env.REVIEW;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### Model Review\n\n${review}`
            });