name: .NET Build and Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'

permissions:
  contents: read
  checks: write

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    env:
      SOLUTION_FILE: src/ProductManagement.sln
      CODE_COVERAGE_THRESHOLD: 50  

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'        

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build and Run static code analysis
      # continue-on-error: false
      run: |
        dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore -warnaserror      

    - name: Run tests with coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y jq        
        dotnet test ${{ env.SOLUTION_FILE }} --no-restore --verbosity normal --logger trx --collect "Code Coverage;Format=cobertura" --results-directory ./TestResults
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1      

    # - name: List test results directory
    #   run: ls -R ./TestResults    

    # - name: Inspect TRX file structure
    #   run: cat ./TestResults/*.trx

    - name: Publish Test Results
      if: always()
      uses: dorny/test-reporter@v1      
      with:
        name: Test Results
        path: ./TestResults/*.trx
        reporter: dotnet-trx

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report
        path: ./TestResults/**/*.cobertura.xml    

    - name: Install ReportGenerator
      if: always()
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
  
    - name: Generate coverage report
      if: always()
      run: reportgenerator -reports:./TestResults/**/*.cobertura.xml -targetdir:./TestResults/coverage -reporttypes:TextSummary    

    - name: Parse coverage report
      if: always()
      id: coverage
      run: |       
        coverage=$(cat ./TestResults/coverage/Summary.txt | grep "Line coverage" | awk '{print $3}' | tr -d '%')
        if (( $(echo "$coverage < $CODE_COVERAGE_THRESHOLD" | bc -l) )); then
          message="Coverage is $coverage%, which is below the threshold of $CODE_COVERAGE_THRESHOLD%. :broken_heart:"
          echo "coverage_message=$message" >> $GITHUB_ENV 
          exit 1
        else
          message="Coverage is $coverage%, which is above the threshold of $CODE_COVERAGE_THRESHOLD%. :heart:"
          echo "coverage_message=$message" >> $GITHUB_ENV 
        fi          
        
    - name: Display coverage summary
      if: always()
      run: |
        echo "### Code Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "$coverage_message" >> $GITHUB_STEP_SUMMARY
        echo "The code coverage report can be downloaded from the artifacts section." >> $GITHUB_STEP_SUMMARY

    - name: Display test summary
      if: always()
      run: |
        echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
        total_tests=$(grep -oP '<Counters.*?total="\K\d+' ./TestResults/*.trx)
        executed_tests=$(grep -oP '<Counters.*?executed="\K\d+' ./TestResults/*.trx)
        passed_tests=$(grep -oP '<Counters.*?passed="\K\d+' ./TestResults/*.trx)
        failed_tests=$(grep -oP '<Counters.*?failed="\K\d+' ./TestResults/*.trx)         
        
        echo "- Total tests: $total_tests" >> $GITHUB_STEP_SUMMARY
        echo "- Executed tests: $executed_tests" >> $GITHUB_STEP_SUMMARY
        echo "- Passed tests: $passed_tests" >> $GITHUB_STEP_SUMMARY
        echo "- Failed tests: $failed_tests" >> $GITHUB_STEP_SUMMARY              

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to Development
      run: echo "Deploying to Development environment..."

  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to QA
      run: echo "Deploying to QA environment..."

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to Staging
      run: echo "Deploying to Staging environment..."
  
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-dev, deploy-qa, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to Production
      run: echo "Deploying to Production environment..."